/*! For license information please see idb.bundle.js.LICENSE.txt */
(()=>{"use strict";var t={"./src/js/idb.min.js":t=>{!function(){function e(t){return new Promise((function(e,n){t.onsuccess=function(){e(t.result)},t.onerror=function(){n(t.error)}}))}function n(t,n,r){var o,i=new Promise((function(i,u){e(o=t[n].apply(t,r)).then(i,u)}));return i.request=o,i}function r(t,e,n){n.forEach((function(n){Object.defineProperty(t.prototype,n,{get:function(){return this[e][n]},set:function(t){this[e][n]=t}})}))}function o(t,e,r,o){o.forEach((function(o){o in r.prototype&&(t.prototype[o]=function(){return n(this[e],o,arguments)})}))}function i(t,e,n,r){r.forEach((function(r){r in n.prototype&&(t.prototype[r]=function(){return this[e][r].apply(this[e],arguments)})}))}function u(t,e,r,o){o.forEach((function(o){o in r.prototype&&(t.prototype[o]=function(){return function(t,e,r){var o=n(t,e,r);return o.then((function(t){if(t)return new c(t,o.request)}))}(this[e],o,arguments)})}))}function s(t){this._index=t}function c(t,e){this._cursor=t,this._request=e}function a(t){this._store=t}function p(t){this._tx=t,this.complete=new Promise((function(e,n){t.oncomplete=function(){e()},t.onerror=function(){n(t.error)},t.onabort=function(){n(t.error)}}))}function f(t,e,n){this._db=t,this.oldVersion=e,this.transaction=new p(n)}function d(t){this._db=t}r(s,"_index",["name","keyPath","multiEntry","unique"]),o(s,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),u(s,"_index",IDBIndex,["openCursor","openKeyCursor"]),r(c,"_cursor",["direction","key","primaryKey","value"]),o(c,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach((function(t){t in IDBCursor.prototype&&(c.prototype[t]=function(){var n=this,r=arguments;return Promise.resolve().then((function(){return n._cursor[t].apply(n._cursor,r),e(n._request).then((function(t){if(t)return new c(t,n._request)}))}))})})),a.prototype.createIndex=function(){return new s(this._store.createIndex.apply(this._store,arguments))},a.prototype.index=function(){return new s(this._store.index.apply(this._store,arguments))},r(a,"_store",["name","keyPath","indexNames","autoIncrement"]),o(a,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),u(a,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),i(a,"_store",IDBObjectStore,["deleteIndex"]),p.prototype.objectStore=function(){return new a(this._tx.objectStore.apply(this._tx,arguments))},r(p,"_tx",["objectStoreNames","mode"]),i(p,"_tx",IDBTransaction,["abort"]),f.prototype.createObjectStore=function(){return new a(this._db.createObjectStore.apply(this._db,arguments))},r(f,"_db",["name","version","objectStoreNames"]),i(f,"_db",IDBDatabase,["deleteObjectStore","close"]),d.prototype.transaction=function(){return new p(this._db.transaction.apply(this._db,arguments))},r(d,"_db",["name","version","objectStoreNames"]),i(d,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach((function(t){[a,s].forEach((function(e){e.prototype[t.replace("open","iterate")]=function(){var e=function(t){return Array.prototype.slice.call(t)}(arguments),n=e[e.length-1],r=this._store||this._index,o=r[t].apply(r,e.slice(0,-1));o.onsuccess=function(){n(o.result)}}}))})),[s,a].forEach((function(t){t.prototype.getAll||(t.prototype.getAll=function(t,e){var n=this,r=[];return new Promise((function(o){n.iterateCursor(t,(function(t){t?(r.push(t.value),void 0===e||r.length!=e?t.continue():o(r)):o(r)}))}))})}));var l={open:function(t,e,r){var o=n(indexedDB,"open",[t,e]),i=o.request;return i.onupgradeneeded=function(t){r&&r(new f(i.result,t.oldVersion,i.transaction))},o.then((function(t){return new d(t)}))},delete:function(t){return n(indexedDB,"deleteDatabase",[t])}};t.exports=l,t.exports.default=t.exports}()}},e={};!function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}("./src/js/idb.min.js")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,